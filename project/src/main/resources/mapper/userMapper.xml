<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.korea.project.mapper.user.UserMapper">

	<select id="selectById">
		select * from user 
		where user_id = #{userId} 
		and user_del = 0
 	</select>
	
	<insert id="signUp">
		INSERT INTO `user` (user_id, user_nickname, user_pwd, user_name, user_email, regdate, user_role, user_del, provider, provider_id)
					VALUES (#{userId}, #{userNickname}, #{userPwd}, #{userName}, #{userEmail}, NOW(), 0, 0, #{provider}, #{providerId});
	</insert>
	
	<!-- 세션에 유저 이름과 닉네임을 넣기위한 조회 -->
	<select id="selectNicknameById" parameterType="String" resultType="com.korea.project.dto.user.SessionUserDTO">
		select 
			user_nickname,
			user_idx
		from 
			user
		where 
			user_id = #{userId}
	</select>
	
	<!-- 아이디 중복검사 -->
	<select id="checkDuplicateById" parameterType="String">
		select
			count(*)
		from
			user
		where
			user_id=#{id}
	</select>
	
		<!-- 이메일 중복검사 -->
	<select id="checkDuplicateByEmail" parameterType="String">
		select
			count(*)
		from
			user
		where
			user_email=#{email}
		and
			provider = "일반"
	</select>
	
		<!-- 닉네임 중복검사 -->
	<select id="checkDuplicateByNickname" parameterType="String">
		select
			count(*)
		from
			user
		where
			user_nickname=#{nickname}
	</select>
	
	<select id="find" parameterType="com.korea.project.dto.user.FindRequestDTO" >
      	SELECT 
			user_id
        FROM user
        <choose>
            <when test="type == 'id'">
                WHERE user_name = #{req1}
                AND user_email = #{req2}
            </when>
            <when test="type == 'pwd'">
                WHERE user_id = #{req1}
                AND user_email = #{req2}
            </when>
        </choose>
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePwd">
		update user
		set user_pwd = #{encodingPwd}
		where user_id = #{userId}
	</update>
	
	<!-- 세션으로 유저 조회 -->
	<select id="selectBySession">
		select *
		from user
		where 
			user_idx = #{userIdx}
		AND
			user_nickname = #{userNickname}
	</select>
	
	<update id="updateUserDel">
		update
			user
		set
			user_del = -1
		where
			user_idx = #{userIdx}
		and
			user_nickname = #{userNickname}
	</update>
	
	<select id="findByOAuth2UserInfo">
		select * from user
		where provider = #{provider}
		and provider_id = #{providerId}
	</select>
	
	<update id="resetNickname">
		update user
		set user_nickname = #{userNickname}
		where user_idx = #{userIdx}
	</update>
	
</mapper>